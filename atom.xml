<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天边一颗星闪闪</title>
  
  <subtitle>浮云遮望眼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaoguyang.github.io/"/>
  <updated>2017-12-15T02:19:18.674Z</updated>
  <id>https://zhaoguyang.github.io/</id>
  
  <author>
    <name>Kael</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github pages + Hexo 搭建个人博客</title>
    <link href="https://zhaoguyang.github.io/2017/12/14/Github%20pages%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhaoguyang.github.io/2017/12/14/Github pages + Hexo 搭建个人博客/</id>
    <published>2017-12-14T09:05:29.000Z</published>
    <updated>2017-12-15T02:19:18.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-pages-Hexo-搭建个人博客"><a href="#Github-pages-Hexo-搭建个人博客" class="headerlink" title="Github pages + Hexo 搭建个人博客"></a>Github pages + Hexo 搭建个人博客</h1><p>源于博客：<a href="http://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">http://www.jianshu.com/p/189fd945f38f</a></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>名词解释：<br>Github pages: Websites for you and your projects.(官方简介)<br>Hexo: Hexo 是一个快速、简洁且高效的博客框架。什么是博客框架？就是她提供了博客内容之外的一切，你只需要关心内容创作(Markdown语法)即可。Hexo是基于nodejs的实现。</p><p>概念不要混淆，github pages和hexo没有联系，Github pages只是提供web服务来访问你repo中的静态html，仅此。<br>Hexo是可以将你写好的博客内容(Markdown格式)生成html页面，还可以帮你部署到指定的github仓库。</p><hr><h2 id="接下来，do-it"><a href="#接下来，do-it" class="headerlink" title="接下来，do it"></a>接下来，do it</h2><ol><li>安装Git<br>下载地址：<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">https://git-for-windows.github.io/</a></li><li>安装node.js<br>因为hexo是基于nodejs的，前面说过。<br>访问：nodejs.org</li><li>安装Hexo<br>自行查看官方文档：<a href="https://hexo.io/zh-cn/docs/#安装" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/#安装</a><br>官方采用npm来安装，如果被墙可以自己想招或者试用淘宝npm镜像(叫做cnpm)<br>官方教程：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a><br>安装cnpm之后，再按照Hexo安装步骤来，只不过将npm命令换成cnpm。</li></ol><hr><h2 id="关于Hexo自动部署"><a href="#关于Hexo自动部署" class="headerlink" title="关于Hexo自动部署"></a>关于Hexo自动部署</h2><p>Hexo最常用的配置文件：_config.yml加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的repo地址</span><br><span class="line">  branch: 你的分支，默认master</span><br></pre></td></tr></table></figure></p><p>下面来写一篇博客发布下：<br>要知道，博客都是md文件，md是markdown的缩写。存放在：”Hexo目录/source/_posts/*.md”。<br>创建:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;blog title&quot;</span><br></pre></td></tr></table></figure></p><p>会发现在”Hexo目录\source_posts\”目录下多了一个文件”blog title.md”。这就是一篇博客了，内容你定。</p><h2 id="怎么发布？"><a href="#怎么发布？" class="headerlink" title="怎么发布？"></a>怎么发布？</h2><ol><li>安装一个插件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>设置git身份信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></li></ol><hr><p>发布成功后，访问yourname.github.io看下成果，有问题留言交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github-pages-Hexo-搭建个人博客&quot;&gt;&lt;a href=&quot;#Github-pages-Hexo-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Github pages + Hexo 搭建个人博客&quot;&gt;&lt;/a&gt;Github pages
      
    
    </summary>
    
      <category term="小教程" scheme="https://zhaoguyang.github.io/categories/%E5%B0%8F%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="github pages" scheme="https://zhaoguyang.github.io/tags/github-pages/"/>
    
      <category term="hexo" scheme="https://zhaoguyang.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://zhaoguyang.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存管理</title>
    <link href="https://zhaoguyang.github.io/2017/12/12/JVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://zhaoguyang.github.io/2017/12/12/JVM内存管理/</id>
    <published>2017-12-12T02:05:29.000Z</published>
    <updated>2017-12-15T02:34:31.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存管理"><a href="#JVM内存管理" class="headerlink" title="JVM内存管理"></a>JVM内存管理</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>1.程序计数器：程序计数器是一块很小的内存空间，是当前线程所执行字节码的行号指示器。线程私有。<br>2.Java虚拟机栈：同样是线程私有，生命周期和线程一致。这个栈里存放了一些栈帧，程序进入每个方法时会创建一个栈帧，方法执行完毕则出栈。<br>3.本地方法栈：与虚拟机栈类似，区别是前者服务于执行Java方法，后者服务于本地Native方法。虚拟机规范对于本地方法栈没有强制规定，具体虚拟机可以自由实现它，Sun HotSpot虚拟机就把本地方法栈和虚拟机栈合二为一了，共用一个也是可以的。<br>本地方法：是遵循JNI(Java Native Interface)的任何非Java语言实现的方法，一般是与硬件、操作系统交互。<br>4.Java堆：Java堆是最大的一块区域，所有对象实例、集合、数组都存在此处。(随着JIT编译器的发展，逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术导致一些微妙变化，并不是所有对象都放在堆上)<br>Java堆可分为：新生代、老年代。<br>新生代包括：Eden区、From Survivor区、To Survivor区<br>老年代只是老年代。<br>5.方法区：方法区和Java堆一样，是多个线程共享的区域。存储类信息、常量、静态变量、即时编译器编译后的代码等。方法区也叫Non-Heap(非堆)。<br>运行时常量池：这个池是方法区的一部分，主要存放上述的常量。<br>字符串常量池JDK1.6之前是位于方法区中的常量池中，JDK1.7时已经被挪到堆之中。<br>永久代：有人把方法区也称作永久代，实际上二者并不等价。仅仅是因为HotSpot虚拟机选择把GC分代收集扩展至方法区，这样可以像管理Java堆一样管理方法区。省去专门为方法区编写内存管理代码的工作。<br>6.直接内存：直接内存时由Native函数库直接分配的，一般在使用文件IO时会用到。</p><hr><h2 id="HotSpot虚拟机对象探秘（创建，内存布局，访问定位）"><a href="#HotSpot虚拟机对象探秘（创建，内存布局，访问定位）" class="headerlink" title="HotSpot虚拟机对象探秘（创建，内存布局，访问定位）"></a>HotSpot虚拟机对象探秘（创建，内存布局，访问定位）</h2><p>对象的创建：<br>首先检查new指令的参数(也就是类名)能否在常量池中定位到一个类的符号引用，并且检查该类是否已加载、解析、初始化过。如果没有那就要现执行类加载过程。<br>检查通过后，开始分配内存。实例所需内存大小在类加载完成后可完全确定(TODO 确定方法在2.3.2小节)。<br>两种内存分配方式，JVM会选择哪一种由垃圾收集器决定。<br>(1)指针碰撞(Dump the pointer)<br>当Java堆中内存是绝对规整的，所有在用的内存都放在一边，空闲的放在另一边，中间有一个指针作为分界点，那所分配的内存就仅仅是把那个指针向空闲的内存挪动一段与对象大小相等的距离。<br>(2)空闲列表(Free list)<br>如果Java堆中的内存不是规整的，已使用的内存和空闲的内存相互交错，那就不能简单的进行指针<br>带有压缩整理功能的垃圾收集器，如Serial、ParNew等带有Compact过程的收集器，系统采用的分配算法是指针碰撞。<br>没有压缩整理功能的垃圾收集器CMS，它是基于Mark-Sweep算法的收集器。通常采用的分配算法是空闲列表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM内存管理&quot;&gt;&lt;a href=&quot;#JVM内存管理&quot; class=&quot;headerlink&quot; title=&quot;JVM内存管理&quot;&gt;&lt;/a&gt;JVM内存管理&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="来杯热Java" scheme="https://zhaoguyang.github.io/categories/%E6%9D%A5%E6%9D%AF%E7%83%ADJava/"/>
    
    
      <category term="JVM" scheme="https://zhaoguyang.github.io/tags/JVM/"/>
    
      <category term="内存管理" scheme="https://zhaoguyang.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
